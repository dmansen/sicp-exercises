(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer)))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-mutex)
  (let ((cell (list #f)))            
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire))) ; retry
            ((eq? m 'release) (clear! cell))))
    the-mutex))
(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

(define (make-semaphore n)
  (let ((lock (make-mutex))
        (count (list 0)))
    (define (aquire)
      (lock 'aquire)
      (if (> count n)
          (begin
            (lock 'release)
            (the-semaphore 'aquire))
          (begin
            (set! count (+ 1 count))
            (lock 'release))))
    (define (release)
      (lock 'aquire)
      (set! count (- 1 count))
      (lock 'release))
    (define (the-semaphore m)
      (cond
        ((eq? 'aquire m) aquire)
        ((eq? 'release m) release)
        (else (error "Unknown dispatch function" m))))
    the-semaphore))

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))

(define (serialized-exchange account1 account2)
  (let ((serializer1 
         (if (< (account1 'get-id) (account2 'get-id))
             (account1 'serializer)
             (account2 'serializer)))
        (serializer2 
         (if (>= (account1 'get-id) (account2 'get-id))
             (account1 'serializer)
             (account2 'serializer))))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))

(define make-account-and-serializer
  (let ((account-count 0)
        (acc-num-mutex (make-mutex)))
    (lambda (balance)
      (acc-num-mutex 'aquire)
      (let ((my-id account-count))
        (set-car! account-count (+ 1 account-count))
        (acc-num-mutex 'release)
        (define (get-id)
          my-id)
        (define (withdraw amount)
          (if (>= balance amount)
              (begin (set! balance (- balance amount))
                     balance)
              "Insufficient funds"))
        (define (deposit amount)
          (set! balance (+ balance amount))
          balance)
        (let ((balance-serializer (make-serializer)))
          (define (dispatch m)
            (cond ((eq? m 'withdraw) withdraw)
                  ((eq? m 'deposit) deposit)
                  ((eq? m 'balance) balance)
                  ((eq? m 'serializer) balance-serializer)
                  ((eq? m 'get-id) get-id)
                  (else (error "Unknown request -- MAKE-ACCOUNT"
                               m))))
          dispatch)))))